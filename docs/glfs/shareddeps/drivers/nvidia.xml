<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../../general.ent">
  %general-entities;

  <!ENTITY nvidia-download-http "https://us.download.nvidia.com/XFree86/Linux-x86_64/&nvidia-version;/NVIDIA-Linux-x86_64-&nvidia-version;.run">
]>

<sect1 id="nvidia" xreflabel="NVIDIA-&nvidia-version;">
  <?dbhtml filename="nvidia.html"?>

  <title>NVIDIA-&nvidia-version;</title>

  <indexterm zone="nvidia">
    <primary sortas="a-nvidia">NVIDIA</primary>
  </indexterm>

  <sect2 role="package">
    <title>Introduction to NVIDIA</title>

    <para>
      The <application>NVIDIA</application> proprietary driver contains
      firmware, kernel drivers, userland drivers pertaining to OpenGL,
      Vulkan, and hardware acceleration, and provides useful utilites for
      NVIDIA cards. If you don't have a NVIDIA GPU, skip to the next package.
    </para>

    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Recommended kernel version to use: linux-&nvidia-linux-version;
        </para>
      </listitem>
      <listitem>
        <para>
          Download (HTTP): <ulink url="&nvidia-download-http;"/>
        </para>
      </listitem>
    </itemizedlist>

    <bridgehead renderas="sect3">Additional Downloads</bridgehead>
    <itemizedlist spacing="compact">
<!--
      <listitem>
        <para>
          Required patch:
          <ulink url="&dl-root;/NVIDIA/NVIDIA-&nvidia-version;-kernel_gpl_cachyos-1.patch"/>
        </para>
      </listitem>
-->
      <listitem>
        <para>
          Required install script:
          <ulink url="&dl-root;/NVIDIA/install-NVIDIA-&nv-manifest-version;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Required manifest file for the install script:
          <ulink url="&dl-root;/NVIDIA/manifest-NVIDIA-&nv-manifest-version;"/>
        </para>
      </listitem>
<!-- NOT READY
      <listitem revision="sysv">
        <para>
          Recommended SysVinit bootscripts for NVIDIA-Powerd:
          <ulink url="&dl-root;/NVIDIA/NVIDIA-sysv-bootscripts-&nv-sysv-bs;.tar.xz"/>
        </para>
      </listitem>
-->
    </itemizedlist>

    <bridgehead renderas="sect3">NVIDIA Dependencies</bridgehead>

    <bridgehead renderas="sect4">Required</bridgehead>
    <para role="required">
      &gbm;,
      <xref linkend="libglvnd"/>, and
      <xref linkend="xorg7-lib"/>
    </para>

    <bridgehead renderas="sect4">Recommended</bridgehead>
    <para role="recommended">
      <itemizedlist spacing="compact">
        <listitem>
          <para>
            <ulink url="&slfs-website;/general/cuda.html">CUDA</ulink>
            (for NVENC, NVDEC, Optical Flow, and other hardware
            acceleration not provided by VDPAU; install after following this
            page)
          </para>
        </listitem>
<!-- NOT READY
        <listitem revision="sysv">
          <para>
            <xref linkend="dbus"/> and <xref linkend="elogind"/> (for
            NVIDIA-Powerd suppport)
          </para>
        </listitem>
-->
        <listitem>
          <para>
            <ulink url="&blfs-svn;/x/gtk3.html">GTK-3</ulink> (for
            <command>nvidia-settings</command>)
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="libvdpau"/> (for using the VDPAU driver)
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="libvk"/> (for using the Vulkan drivers)
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="nvidia-egl"/> (for EGL driver support)
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="wayland"/> (needed for Wayland support)
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="xorg-server"/> (required for running
            <command>nvidia-xconfig</command>, like in <xref
            linkend="whatnow"/>)
          </para>
        </listitem>
      </itemizedlist>
    </para>

  </sect2>

  <sect2>
    <title>Preparing for the NVIDIA Installation</title>

    <para>
      First enable XFree86 DRI and Nouveau
      <footnote><para>
        Newer versions of
        the NVIDIA drivers will fail to compile with TTY support unless a
        graphics driver is included in the kernel. Nouveau is used here, though
        alternate graphics drivers may also work.
      </para></footnote>
      support in the kernel and recompile if necessary.
    </para>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="nvidia-kernel.xml"/>

    <important><para>
      Build these drivers as kernel modules so that they can properly be
      blacklisted.
    </para></important>

    <para>
      Extract the <application>NVIDIA</application> driver runfile and
      navigate to the extracted directory:
    </para>

<screen><userinput>sh NVIDIA-Linux-x86_64-&nvidia-version;.run -x &amp;&amp;
cd NVIDIA-Linux-x86_64-&nvidia-version;</userinput></screen>

<!--
    <para>
      Apply a patch for the proprietary kernel module type for the driver for
      compatibility with <application>linux-6.15</application>:
    </para>

<screen><userinput>patch -d kernel -Np1 -i ../../NVIDIA-&nvidia-version;-kernel_gpl_cachyos-1.patch</userinput></screen>
-->

  </sect2>

  <sect2>
    <title>Installation of the NVIDIA Kernel Modules</title>

    <note><para>
      Building the kernel modules in a chroot will likely cause a build
      failure. It is heavily recommended to build them when booted in the LFS
      target to avoid <command>uname -r</command> reporting the kernel version
      of the host rather than the target leading to build files being unable to
      be found. This can be worked around by specifying
      <envar>KERNEL_UNAME=<replaceable>&lt;x.x.x&gt;</replaceable></envar> in
      the <command>make</command> command which will override the kernel
      version to build against. The kernel version must have already been built
      for this to work.
    </para></note>

    <para>
      Now you will need to build the kernel modules for the driver. There are
      two types: <emphasis role="bold">open</emphasis> and
      <emphasis role="bold">proprietary</emphasis>. If you have the
      NVIDIA Grace Hopper or NVIDIA Blackwell cards, you must
      compile the <emphasis role="bold">open</emphasis> kernel modules.
      If you have a Turing, Ampere, Ada Lovelace,
      or Hopper card, it is recommended to now build the
      <emphasis role="bold">open</emphasis> kernel modules.
      If you have a Maxwell, Pascal, or Volta card, build the
      <emphasis role="bold">proprietary</emphasis> kernel modules.
      If you are using both an older and newer card, but not the newest cards,
      build the <emphasis role="bold">proprietary</emphasis> kernel modules.
    </para>

    <para>
      If you are going to build the <emphasis role="bold">open</emphasis>
      kernel modules, navigate to the <filename
      class="directory">kernel-open</filename> directory:
    </para>

<screen><userinput>cd kernel-open</userinput></screen>

    <para>
      If you are going to instead build the <emphasis
      role="bold">proprietary</emphasis> kernel modules, navigate to the
      <filename class="directory">kernel</filename> directory:
    </para>

<!-- proprietary is the exception, not the rule -->
<screen><computeroutput>cd kernel</computeroutput></screen>

    <para>
      There will be 5 or 6 kernel modules that will be built. Depending on your
      use case, you can skip building a module or two. The UVM (Unified Virtual
      Memory) module is for use with <ulink
      url="&slfs-website;/general/cuda.html">CUDA</ulink>. If you won't use
      it, nor wish to use its capabilities, you can skip building the UVM
      kernel module. There is also the PeerMem module which is for datacenters.
      For gaming, it can safely be disabled.
    </para>

    <para>
      For UVM, the module is named <computeroutput>nvidia-uvm</computeroutput>.
      For PeerMem, it will be named
      <computeroutput>nvidia-peermem</computeroutput>. To skip these, add the
      module names to the <envar>NV_EXCLUDE_KERNEL_MODULES</envar> for the
      <command>make</command> command. The variable should be seperated, as
      such:
      <computeroutput>NV_EXCLUDE_KERNEL_MODULES="nvidia-uvm nvidia-peermem"</computeroutput>.
      The <command>make</command> command will have the variable set to
      nothing. Add to it as you see fit.
    </para>

    <para>
      Now build the kernel modules by running the following command:
    </para>

<screen><userinput>make NV_EXCLUDE_KERNEL_MODULES=</userinput></screen>

    <note>
      <para>
        You may encounter various build failures. This usually happens because
        the kernel version is incompatible with the current kernel version.
        If this happens, in most cases this is fixed by downgrading the kernel.
        When a new driver release happens, the driver will then most likely
        support the kernel version at the time. At the top of this section, the
        recommended kernel series to use with this driver is mentioned to
        give an idea of what is the idea kernel version to build against.
        The kernel version used for kernel parameters and such in this book is
        linux-&linux-version;. As of now, there are no option mismatches.
      </para>
    </note>

    <important>
      <para>
        When you rebuild/upgrade the kernel, you will also need to reinstall
        the <application>NVIDIA</application> kernel modules.
      </para>

      <para>
        Kernel modules are installed in a versioned directory that, when they
        are built against a different kernel version, will no longer match the
        booted kernel version and cannot be used. Furthermore, there is a
        glue built, so any changes to the kernel can break that glue. For
        kernel modules in the Linux source tree, known as first-party modules,
        they get updated and rebuilt alongside the kernel, so issues aren't ran
        into for first-party modules. Third-party modules aren't, however,
        and need to be updated/rebuilt.
      </para>

      <para>
        When you rebuild/upgrade the kernel against the same NVIDIA driver
        version, you will only need to reinstall the kernel modules. You will
        have to reinstall the driver software as well if you are upgrading from
        a previous driver version.
      </para>
    </important>

    <para>
      Now as the &root; user:
    </para>

<screen role="root"><userinput>make modules_install &amp;&amp;
cd ..</userinput></screen>

    <para>
      Install the firmware as the &root; user:
    </para>

<screen role="root"><userinput>rm -rvf /usr/lib/firmware/nvidia/[0-9]* &amp;&amp;
mkdir -pv /usr/lib/firmware/nvidia/&nvidia-version; &amp;&amp;
cp -v firmware/*.bin /usr/lib/firmware/nvidia/&nvidia-version;</userinput></screen>

    <para>
      Finally, unset the <envar>NVIDIA_KERNEL_TYPE</envar> variable:
    </para>
        
<screen><userinput>unset NVIDIA_KERNEL_TYPE</userinput></screen>

  </sect2>

  <sect2 role="installation">
    <title>Installing the NVIDIA Driver Software</title>

<!--
    <note><para>
      If you have an existing installation, it may be a good idea to follow
      <xref linkend="nvidia-uninstalling"/> first before going through this 
      section to remove some cruft and leftover libraries. This is not strictly
      necessary, though.
    </para></note>
-->

    <para>
      Install the install script and manifest file for the script as the &root;
      user:
    </para>

<screen role="root"><userinput>mkdir -pv /usr/share/nvidia              &amp;&amp;
install -vm755 ../install-NVIDIA-&nv-manifest-version;        \
               /usr/sbin/nvidia-install  &amp;&amp;
install -vm644 ../manifest-NVIDIA-&nv-manifest-version;       \
               /usr/share/nvidia/manifest</userinput></screen>

    <para>
      Now see what options there are and what you want to install by running
      <command>/sbin/nvidia-install --help</command>.
    </para>

    <para>
      If you want to do the default installation, you can just run the
      following command as the &root; user:
    </para>

<screen role="root"><userinput>/sbin/nvidia-install</userinput></screen>

    <important><para>
      If you are booted into the system you are running the commands for, doing
      so for the above command in a graphical environment may crash that
      environment and drop you back to a TTY. Don't do that, just run it from a
      TTY or in a chroot where the display doesn't rely on the libraries
      provided from this driver. As for the TTY, it is actually driven by the
      kernel or its modules, not the libraries. That is why running the above
      command in a TTY is safe&mdash;it doesn't overwrite the kernel modules.
    </para></important>

  </sect2>

<!-- UNFINISHED, DOES NOT WORK!

  <sect2 revision="sysv">
    <title>Installation of NVIDIA-Powerd</title>
    <para>
      If you want <application>NVIDIA-Powerd</application>, which can suspend
      and hibernate if asked to, then run the following commands as the &root;
      user to install the daemon and the bootscripts:
    </para>
<screen role="root"><userinput>mkdir -pv /usr/share/dbus-1/system.d        &amp;&amp;
install -vm755 nvidia-powerd /usr/bin       &amp;&amp;
cp -v nvidia-dbus.conf                       \
      /usr/share/dbus-1/system.d            &amp;&amp;
tar -xf ../NVIDIA-sysv-bootscripts-&nv-sysv-bs;.tar.xz &amp;&amp;
pushd NVIDIA-sysv-bootscripts-&nv-sysv-bs;             &amp;&amp;
  make install-nvidia-powerd                &amp;&amp;
popd                                        &amp;&amp;
rm -rf NVIDIA-sysv-bootscripts-&nv-sysv-bs;</userinput></screen>
  </sect2>
-->

  <sect2 revision="systemd">
    <title>Installation of NVIDIA-Powerd</title>
    <para>
      If you want <application>NVIDIA-Powerd</application>, which can suspend
      and hibernate if asked to, then run the following commands as the &root;
      user to install the daemon and the Systemd unit files:
    </para>
<screen role="root"><userinput>mkdir -pv /usr/lib/systemd/system             \
          /usr/lib/systemd/system-sleep       \
          /usr/share/dbus-1/system.d         &amp;&amp;
install -vm755 nvidia-powerd /usr/bin        &amp;&amp;
install -vm755 systemd/nvidia-sleep.sh        \
               /usr/bin                      &amp;&amp;
install -vm755 systemd/system-sleep/nvidia    \
               /usr/lib/systemd/system-sleep &amp;&amp;
cp -v systemd/system/*.service                \
      /usr/lib/systemd/system                &amp;&amp;
cp -v nvidia-dbus.conf                        \
      /usr/share/dbus-1/system.d             &amp;&amp;

cat &gt; systemd-homed-override.conf &lt;&lt; "EOF" &amp;&amp;
<literal>[Service]
Environment="SYSTEMD_HOME_LOCK_FREEZE_SESSION=false"</literal>
EOF
cat &gt; systemd-suspend-override.conf &lt;&lt; "EOF" &amp;&amp;
<literal>[Service]
Environment="SYSTEMD_SLEEP_FREEZE_USER_SESSIONS=false"</literal>
EOF

for service in {homed,suspend,suspend-then-hibernate,hibernate,hybrid-sleep}; do
  mkdir -pv /usr/lib/systemd/system/systemd-"$service".service.d
done &amp;&amp;
cp -v systemd-homed-override.conf                                                       \
      /usr/lib/systemd/system/systemd-homed.service.d/10-nvidia-no-freeze-session.conf &amp;&amp;
for service in {suspend,suspend-then-hibernate,hibernate,hybrid-sleep}; do
  cp -v systemd-suspend-override.conf \
    /usr/lib/systemd/system/systemd-"$service".service.d/10-nvidia-no-freeze-session.conf
done</userinput></screen>
    <para>
      The Systemd units will need to be ran at startup. Enable them as the
      &root; user:
    </para>
<screen role="root"><userinput>for service in nvidia-{resume,hibernate,suspend}; do
  systemctl enable $service
done</userinput></screen>
  </sect2>

  <sect2 role="configuration">
    <title>Configuring NVIDIA</title>

    <sect3 id="nvidia-config">
      <title>Config Files</title>
      <para>
        <filename>/usr/lib/modprobe.d/nouveau.conf</filename>
      </para>
      <para>
        <filename>/usr/lib/modprobe.d/nvidia_drm.conf</filename>
      </para>
      <para revision="systemd">
        <filename>/usr/lib/modprobe.d/nvidia.conf</filename>
      </para>
    </sect3>

    <sect3>
      <title>List of Packages With Issues</title>

      <para>
        Using this driver can come with compromises. So far, these issues seem
        limited to Wayland, desktop environments, and display managers. The
        list below documents the known packages that have issues with this
        driver.
      </para>

      <itemizedlist>
        <listitem revision="sysv">
          <para><ulink url="&blfs-svn;/x/gdm.html">GDM</ulink>: Using this
          package on SysVinit systems will result in failure as GDM does not
          want to use Wayland for NVIDIA GPUs, but a permission issue with SysV
          prevents X11 from being used. You must launch
          <ulink url="&blfs-svn;/gnome/mutter.html">Mutter</ulink> or
          <ulink url="&blfs-svn;/gnome/gnome-session.html">gnome-session</ulink>
          through the terminal instead. Read the Mutter entry.</para>
        </listitem>
        <listitem revision="sysv"><para>
          <ulink url="&blfs-svn;/gnome/gnome-session.html">gnome-session</ulink>:
          This must be launched via a TTY or a display manager other than GDM
          for now on SysVinit systems.
        </para></listitem>
        <listitem>
          <para><ulink url="&blfs-svn;/gnome/mutter.html">Mutter</ulink>:
          Compile this package with
          <parameter>-D wayland_eglstream=true</parameter> and
          <parameter>-D egl_device=true</parameter> to enable launching with
          Wayland. Ensure the <xref linkend="nvidia-egl"/> are
          installed.</para>
          <para revision="sysv">On SysVinit systems, Mutter can only be
          launched via a TTY or a display manager other than GDM as of
          now.</para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="xorg-server"/>: While this package works just fine,
            the TearFree patch and configuration file will be useless as the
            Xorg driver (<filename class="libraryfile">nvidia_drv</filename>)
            will be used instead of the modesetting driver. The TearFree patch
            and configuration file is modesetting-specific. Thus, you must find
            another way to get rid of screen tearing if that is your wish. Such
            fixes may bog down performance drastically such that 144 FPS may
            drop to 60 FPS.
          </para>
        </listitem>
      </itemizedlist>

    </sect3>

    <sect3><title>Configuration Information</title>

      <para>
        Nouveau and NVIDIAFB support was compiled into the kernel to make the
        NVIDIA kernel modules build successfully. However, Nouveau and NVIDIAFB
        conflict with the NVIDIA kernel modules, so they should be blacklisted.
        Furthermore, other modules may have been built that can conflict, and
        should likewise be disabled.
      </para>

      <para>
        As the &root; user, create the file
        <filename>/usr/lib/modprobe.d/nouveau.conf</filename> to blacklist Nouveau
        and NVIDIAFB, as well as other conflicting modules:
      </para>
      
<screen role="root"><userinput>mkdir -pv /usr/lib/modprobe.d &amp;&amp;
cat &gt; /usr/lib/modprobe.d/nouveau.conf &lt;&lt; "EOF"
<literal># Begin /usr/lib/modprobe.d/nouveau.conf

blacklist nouveau
blacklist nvidiafb
blacklist nova_core
blacklist nova_drm

# End /usr/lib/modprobe.d/nouveau.conf</literal>
EOF</userinput></screen>

      <para>
        The DRM kernel module does not use modesetting by default which is
        needed by Wayland compositors. Make it use modesetting as the &root;
        user:
      </para>

<screen role="root"><userinput>cat &gt; /usr/lib/modprobe.d/nvidia_drm.conf &lt;&lt; "EOF"
<literal># Begin /usr/lib/modprobe.d/nvidia_drm.conf

options nvidia_drm modeset=1

# End /usr/lib/modprobe.d/nvidia_drm.conf</literal>
EOF</userinput></screen>

      <!-- Cannot be used on SysVinit yet, and the kernel module will complain
           as the ability to make use of sleep/hibernate is not yet
           implemented. We must provide the files, but they do not work as of
           yet. - Zeckma -->
      <para revision="systemd">
        When the GPU sleeps/hibernates, it will lose all memory allocations by
        default. You can prevent this by setting two options for the NVIDIA
        module. If you do not use sleep/hibernate, you can skip making the
        following configuration file. Otherwise, as the &root; user:
      </para>

<screen revision="systemd" role="root"><userinput>cat &gt; /usr/lib/modprobe.d/nvidia.conf &lt;&lt; "EOF"
<literal># Begin /usr/lib/modprobe.d/nvidia.conf

options nvidia NVreg_PreserveVideoMemoryAllocations=1
options nvidia NVreg_TemporaryFilePath=/var/tmp

# End /usr/lib/modprobe.d/nvidia.conf</literal>
EOF</userinput></screen>

      <para>
        This driver does not install DRI
        <footnote><para>
          Direct Rendering Infrastructure.
        </para></footnote>
        drivers or driver stubs. Likewise, it does not install a
        <application>pkgconf</application> file saying where to find the
        associated files. The files aren't needed with this driver. However,
        some applications expect the <application>pkg-config</application> file
        to exist, namely <xref linkend="xorg-server"/>. Create one now as the
        &root; user:
      </para>

<screen role="root"><userinput>cat &gt; /usr/lib/pkgconfig/dri.pc &lt;&lt; "EOF"
<literal>prefix=/usr
includedir=${prefix}/include

dridriverdir=/usr/lib/dri

Name: dri
Description: Direct Rendering Infrastructure
Version: &nvidia-version;
Requires.private: libdrm >=  2.4.109
Cflags: -I${includedir}</literal>
EOF</userinput></screen>

      <para>
        Applications that do require this file typically will not link against
        any library in <filename class="libraryfile">/usr/lib/dri</filename>.
        If you are worried that an application will try to link against
        non-existent libraries, you can compile <xref linkend="mesa"/> to get
        these libraries and a real <application>pkg-config</application> file.
        Note that those libraries will not be used when this driver is in use.
      </para>

      <note><para>
        You should skip to <xref linkend="xcb-utils"/> after you are done with
        this page unless you wish to install extra software.
      </para></note>

    </sect3>

  </sect2>

  <sect2 role="content">
    <title>Contents</title>

    <segmentedlist>
      <segtitle>Installed Programs</segtitle>
      <segtitle>Installed Firmware</segtitle>
      <segtitle>Installed Libraries</segtitle>
      <segtitle>Installed Directories</segtitle>

      <seglistitem>
        <seg>
          nvidia-install,
          nvidia-modprobe,
          nvidia-settings,
          nvidia-smi, and
          nvidia-xconfig
        </seg>
        <seg>
          gsp_ga10x.bin and
          gsp_tu10x.bin
        </seg>
        <seg>
          libcudadebugger,
          libcuda,
          libEGL_nvidia,
          libGLESv2_nvidia,
          libGLX_nvidia,
          libglxserver_nvidia,
          libnvcuvid,
          libnvoptix,
          libnvidia-allocator,
          libnvidia-api,
          libnvidia-cfg,
          libnvidia-eglcore,
          libnvidia-encode,
          libnvidia-fbc,
          libnvidia-glcore,
          libnvidia-glsi,
          libnvidia-glvkspirv,
          libnvidia-gpucomp,
          libnvidia-gtk3,
          libnvidia-ml,
          libnvidia-ngx,
          libnvidia-nvvm{70,},
          libnvidia-opencl,
          libnvidia-opticalflow,
          libnvidia-pkcs11-openssl3,
          libnvidia-pkcs11,
          libnvidia-ptxjitcompiler,
          libnvidia-rtcore,
          libnvidia-tls,
          libnvidia-wayland-client,
          libOpenCL.so,
          libvdpau_nvidia,
          nvidia-drm_gbm,
          nvidia_drv, and
          for <xref linkend="wine"/> (_nvngx,
          nvngx, and
          nvngx_dlssg; all three are DLLs)
        </seg>
        <seg>
          /usr/lib/firmware/nvidia/&nvidia-version;,
          /usr/lib/nvidia/wine,
          /usr/share/glvnd/egl_vendor.d, and
          /usr/share/nvidia
        </seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">Short Descriptions</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="nvidia-install">
        <term><command>nvidia-install</command></term>
        <listitem>
          <para>
            is an install script that installs all the software from
            this driver that you need
          </para>
          <indexterm zone="nvidia nvidia-install">
            <primary sortas="b-nvidia-install">nvidia-install</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="nvidia-modprobe">
        <term><command>nvidia-modprobe</command></term>
        <listitem>
          <para>
            is a suid program which populates <filename
            class="directory">/dev</filename> with directories and files for
            this driver and is loaded when starting a display server
          </para>
          <indexterm zone="nvidia nvidia-modprobe">
            <primary sortas="b-nvidia-modprobe">nvidia-modprobe</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="nvidia-settings">
        <term><command>nvidia-settings</command></term>
        <listitem>
          <para>
            a GUI application relying on <ulink url="&blfs-svn;/x/gtk3.html">GTK-3
            </ulink> that allows tweaking settings like resolution and refresh rate
          </para>
          <indexterm zone="nvidia nvidia-settings">
            <primary sortas="b-nvidia-settings">nvidia-settings</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="nvidia-smi">
        <term><command>nvidia-smi</command></term>
        <listitem>
          <para>
            provides NVIDIA GPU monitoring information
          </para>
          <indexterm zone="nvidia nvidia-smi">
            <primary sortas="b-nvidia-smi">nvidia-smi</primary>
          </indexterm>
        </listitem>
      </varlistentry>

<!--
      <varlistentry id="nvidia-uninstall">
        <term><command>nvidia-uninstall</command></term>
        <listitem>
          <para>
            is a custom-made install script that uninstalls the driver
          </para>
          <indexterm zone="nvidia nvidia-uninstall">
            <primary sortas="b-nvidia-uninstall">nvidia-uninstall</primary>
          </indexterm>
        </listitem>
      </varlistentry>
-->

      <varlistentry id="nvidia-xconfig">
        <term><command>nvidia-xconfig</command></term>
        <listitem>
          <para>
            manipulates <application>X11</application> configuration files
            to allow the <application>NVIDIA</application> driver to be used
            when starting <application>X11</application>
          </para>
          <indexterm zone="nvidia nvidia-xconfig">
            <primary sortas="b-nvidia-xconfig">nvidia-xconfig</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libcudadebugger">
        <term><filename class="libraryfile">libcudadebugger</filename></term>
        <listitem>
          <para>
            allows debugging <application>CUDA</application> applications
          </para>
          <indexterm zone="nvidia libcudadebugger">
            <primary sortas="c-libcudadebugger">libcudadebugger</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libcuda">
        <term><filename class="libraryfile">libcuda</filename></term>
        <listitem>
          <para>
            provides support for applications that use
            <application>CUDA</application>
          </para>
          <indexterm zone="nvidia libcuda">
            <primary sortas="c-libcuda">libcuda</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libEGL_nvidia">
        <term><filename class="libraryfile">libEGL_nvidia</filename></term>
        <listitem>
          <para>
            provides the <application>NVIDIA</application> implementation
            of EGL
          </para>
          <indexterm zone="nvidia libEGL_nvidia">
            <primary sortas="c-libEGL_nvidia">libEGL_nvidia</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libGLESv2_nvidia">
        <term><filename class="libraryfile">libGLESv2_nvidia</filename></term>
        <listitem>
          <para>
            provides the <application>NVIDIA</application> implementation
            of OpenGL ES v2
          </para>
          <indexterm zone="nvidia libGLESv2_nvidia">
            <primary sortas="c-libGLESv2_nvidia">libGLESv2_nvidia</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libGLX_nvidia">
        <term><filename class="libraryfile">libGLX_nvidia</filename></term>
        <listitem>
          <para>
            provides the <application>NVIDIA</application> implementation
            of GLX
          </para>
          <indexterm zone="nvidia libGLX_nvidia">
            <primary sortas="c-libGLX_nvidia">libGLX_nvidia</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libglxserver_nvidia">
        <term><filename class="libraryfile">libglxserver_nvidia</filename></term>
        <listitem>
          <para>
            is the <application>NVIDIA</application> X11 GLX extension module
          </para>
          <indexterm zone="nvidia libglxserver_nvidia">
            <primary sortas="c-libglxserver_nvidia">libglxserver_nvidia</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvcuvid">
        <term><filename class="libraryfile">libnvcuvid</filename></term>
        <listitem>
          <para>
            provides an interface to hardware accelerated decoding
          </para>
          <indexterm zone="nvidia libnvcuvid">
            <primary sortas="c-libnvcuvid">libnvcuvid</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvoptix">
        <term><filename class="libraryfile">libnvoptix</filename></term>
        <listitem>
          <para>
            provides the OptiX Ray Tracing API
          </para>
          <indexterm zone="nvidia libnvoptix">
            <primary sortas="c-libnvoptix">libnvoptix</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-allocator">
        <term><filename class="libraryfile">libnvidia-allocator</filename></term>
        <listitem>
          <para>
            handles NVIDIA GPU memory management
          </para>
          <indexterm zone="nvidia libnvidia-allocator">
            <primary sortas="c-libnvidia-allocator">libnvidia-allocator</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-api">
        <term><filename class="libraryfile">libnvidia-api</filename></term>
        <listitem>
          <para>
            provides the NVAPI interface
          </para>
          <indexterm zone="nvidia libnvidia-api">
            <primary sortas="c-libnvidia-api">libnvidia-api</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-cfg">
        <term><filename class="libraryfile">libnvidia-cfg</filename></term>
        <listitem>
          <para>
            queries a NVIDIA GPU's configuration settings
          </para>
          <indexterm zone="nvidia libnvidia-cfg">
            <primary sortas="c-libnvidia-cfg">libnvidia-cfg</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-eglcore">
        <term><filename class="libraryfile">libnvidia-eglcore</filename></term>
        <listitem>
          <para>
            provides primary EGL functionality to other components of the
            driver
          </para>
          <indexterm zone="nvidia libnvidia-eglcore">
            <primary sortas="c-libnvidia-eglcore">libnvidia-eglcore</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-encode">
        <term><filename class="libraryfile">libnvidia-encode</filename></term>
        <listitem>
          <para>
            provides an interface to video encoder hardware
          </para>
          <indexterm zone="nvidia libnvidia-encode">
            <primary sortas="c-libnvidia-encode">libnvidia-encode</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-fbc">
        <term><filename class="libraryfile">libnvidia-fbc</filename></term>
        <listitem>
          <para>
            provides an interface to capture and optionally encode the
            framebuffer of an <application>X11</application> server screen
          </para>
          <indexterm zone="nvidia libnvidia-fbc">
            <primary sortas="c-libnvidia-fbc">libnvidia-fbc</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-glcore">
        <term><filename class="libraryfile">libnvidia-glcore</filename></term>
        <listitem>
          <para>
            provides the primary OpenGL functionality for other components of
            this driver
          </para>
          <indexterm zone="nvidia libnvidia-glcore">
            <primary sortas="c-libnvidia-glcore">libnvidia-glcore</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-glsi">
        <term><filename class="libraryfile">libnvidia-glsi</filename></term>
        <listitem>
          <para>
            provides the OpenGL Shader Interface for other components of this
            driver
          </para>
          <indexterm zone="nvidia libnvidia-glsi">
            <primary sortas="c-libnvidia-glsi">libnvidia-glsi</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-glvkspirv">
        <term><filename class="libraryfile">libnvidia-glvkspirv</filename></term>
        <listitem>
          <para>
            allows using SPIR-V shaders in OpenGL
          </para>
          <indexterm zone="nvidia libnvidia-glvkspirv">
            <primary sortas="c-libnvidia-glvkspirv">libnvidia-glvkspirv</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-gpucomp">
        <term><filename class="libraryfile">libnvidia-gpucomp</filename></term>
        <listitem>
          <para>
            provides primary functionality for allowing computations being done
            on the GPU for use with other components in this driver
          </para>
          <indexterm zone="nvidia libnvidia-gpucomp">
            <primary sortas="c-libnvidia-gpucomp">libnvidia-gpucomp</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-gtk3">
        <term><filename class="libraryfile">libnvidia-gtk3</filename></term>
        <listitem>
          <para>
            for <command>nvidia-settings</command>; utilizes
            <application>GTK-3</application>
          </para>
          <indexterm zone="nvidia libnvidia-gtk3">
            <primary sortas="c-liblnvidia-gtk3">libnvidia-gtk3</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-ml">
        <term><filename class="libraryfile">libnvidia-ml</filename></term>
        <listitem>
          <para>
            provides a monitoring and management API
          </para>
          <indexterm zone="nvidia libnvidia-ml">
            <primary sortas="c-libnvidia-ml">libnvidia-ml</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-ngx">
        <term><filename class="libraryfile">libnvidia-ngx</filename></term>
        <listitem>
          <para>
            provides functions for DLSS support
          </para>
          <indexterm zone="nvidia libnvidia-ngx">
            <primary sortas="c-libnvidia-ngx">libnvidia-ngx</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-nvvm">
        <term><filename class="libraryfile">libnvidia-nvvm</filename></term>
        <listitem>
          <para>
            provides JIT LTO for CUDA
          </para>
          <indexterm zone="nvidia libnvidia-nvvm">
            <primary sortas="c-libnvidia-nvvm">libnvidia-nvvm</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-opencl">
        <term><filename class="libraryfile">libnvidia-opencl</filename></term>
        <listitem>
          <para>
            provides <application>NVIDIA</application>'s implementation of
            the OpenCL API standard
          </para>
          <indexterm zone="nvidia libnvidia-opencl">
            <primary sortas="c-libnvidia-opencl">libnvidia-opencl</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-opticalflow">
        <term><filename class="libraryfile">libnvidia-opticalflow</filename></term>
        <listitem>
          <para>
            provides Optical Flow support which improves frames, similar to
            DLSS, with the help of CUDA
          </para>
          <indexterm zone="nvidia libnvidia-opticalflow">
            <primary sortas="c-libnvidia-opticalflow">libnvidia-opticalflow</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-pkcs11">
        <term><filename class="libraryfile">libnvidia-pkcs11</filename></term>
        <listitem>
          <para>
            provides cryptography functions when the driver is operating in
            Confidential Compute mode
          </para>
          <indexterm zone="nvidia libnvidia-pkcs11">
            <primary sortas="c-libnvidia-pkcs11">libnvidia-pkcs11</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-ptxjitcompiler">
        <term><filename class="libraryfile">libnvidia-ptxjitcompiler</filename></term>
        <listitem>
          <para>
            is a JIT compiler which compiles PTX into GPU machine code;
            used by CUDA
          </para>
          <indexterm zone="nvidia libnvidia-ptxjitcompiler">
            <primary sortas="c-libnvidia-ptxjitcompiler">libnvidia-ptxjitcompiler</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-rtcore">
        <term><filename class="libraryfile">libnvidia-rtcore</filename></term>
        <listitem>
          <para>
            implements the RT (Ray Tracing) core functionality and is used by
            other components in this driver
          </para>
          <indexterm zone="nvidia libnvidia-rtcore">
            <primary sortas="c-libnvidia-rtcore">libnvidia-rtcore</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-tls">
        <term><filename class="libraryfile">libnvidia-tls</filename></term>
        <listitem>
          <para>
            provides TLS support for the <application>NVIDIA
            </application> OpenGL implementations
          </para>
          <indexterm zone="nvidia libnvidia-tls">
            <primary sortas="c-libnvidia-tls">libnvidia-tls</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-wayland-client">
        <term><filename class="libraryfile">libnvidia-wayland-client</filename></term>
        <listitem>
          <para>
            is required for <command>nvidia-settings</command> on
            <application>Wayland</application>
          </para>
          <indexterm zone="nvidia libnvidia-wayland-client">
            <primary sortas="c-libnvidia-wayland-client">libnvidia-wayland-client</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libvdpau_nvidia">
        <term><filename class="libraryfile">libvdpau_nvidia</filename></term>
        <listitem>
          <para>
            provides the <application>NVIDIA</application> implementation for
            the VDPAU API
          </para>
          <indexterm zone="nvidia libvdpau_nvidia">
            <primary sortas="c-libvdpau_nvidia">libvdpau_nvidia</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="_nvngx">
        <term><filename class="libraryfile">_nvngx</filename></term>
        <listitem>
          <para>
            provides DLSS support for use with Proton
          </para>
          <indexterm zone="nvidia _nvngx">
            <primary sortas="c-_nvngx">_nvngx</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="nvngx">
        <term><filename class="libraryfile">nvngx</filename></term>
        <listitem>
          <para>
            provides DLSS support for use with <application>Wine</application>
          </para>
          <indexterm zone="nvidia nvngx">
            <primary sortas="c-nvngx">nvngx</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="nvngx_dlssg">
        <term><filename class="libraryfile">nvngx_dlssg</filename></term>
        <listitem>
          <para>
            is the DLSS 3 Frame Generation library
          </para>
          <indexterm zone="nvidia nvngx_dlssg">
            <primary sortas="c-nvngx_dlssg">nvngx_dlssg</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="nvidia-drm_gbm">
        <term><filename class="libraryfile">nvidia-drm_gbm</filename></term>
        <listitem>
          <para>
            is the <application>NVIDIA</application> GBM driver
          </para>
          <indexterm zone="nvidia nvidia-drm_gbm">
            <primary sortas="c-nvidia-drm_gbm">nvidia-drm_gbm</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="nvidia_drv">
        <term><filename class="libraryfile">nvidia_drv</filename></term>
        <listitem>
          <para>
            is the <application>NVIDIA</application> <application>X11
            </application> driver
          </para>
          <indexterm zone="nvidia nvidia_drv">
            <primary sortas="c-nvidia_drv">nvidia_drv</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
