<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../../general.ent">
  %general-entities;

<!-- for when .0 is not part of the new tarball name, but always referenced -->
<!ENTITY nss-url "archive.mozilla.org/pub/security/nss/releases">

<!-- micro versions-->
<!--<!ENTITY nss-download-http "https://&nss-url;/NSS_3_&nss-minor-version;_&nss-micro-version;_RTM/src/nss-&nss-version;.tar.gz">-->

<!-- no micro versions -->
  <!ENTITY nss-download-http "https://&nss-url;/NSS_&nss-dir;_RTM/src/nss-&nss-version;.tar.gz">
  <!ENTITY nss-download-ftp  " ">
]>

<sect1 id="nss" xreflabel="nss-&nss-version;">
  <?dbhtml filename="nss.html"?>

  <title>NSS-&nss-version;</title>

  <indexterm zone="nss">
    <primary sortas="a-NSS">NSS</primary>
  </indexterm>

  <sect2 role="package">
    <title>Introduction to NSS</title>

    <para>
      The Network Security Services (<application>NSS</application>) package is
      a set of libraries designed to support cross-platform development of
      security-enabled client and server applications. Applications built with
      NSS can support SSL v2 and v3, TLS, PKCS #5, PKCS #7, PKCS #11, PKCS #12,
      S/MIME, X.509 v3 certificates, and other security standards. This is
      useful for implementing SSL and S/MIME or other Internet security
      standards into an application.
    </para>

    &long-build-time;

    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Download (HTTP): <ulink url="&nss-download-http;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Download (FTP): <ulink url="&nss-download-ftp;"/>
        </para>
      </listitem>
    </itemizedlist>

    <bridgehead renderas="sect3">Additional Downloads</bridgehead>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Required patch:
          <ulink url="&dl-root;/nss/nss-standalone-1.patch"/>
        </para>
      </listitem>
<!--
      <listitem>
        <para>
          Required patch for processors lacking the <quote>adx</quote>
          instruction set:
          <ulink url="&dl-root;/nss-&nss-version;-illegal_instruction-1.patch"/>
        </para>
      </listitem>
-->
    </itemizedlist>

    <bridgehead renderas="sect3">NSS Dependencies</bridgehead>

    <bridgehead renderas="sect4">Required</bridgehead>
    <para role="required">
      <xref linkend="nspr"/>
    </para>

    <bridgehead renderas="sect4">Recommended</bridgehead>
    <para role="recommended">
      <xref linkend="sqlite"/> (required for <ulink
      url="&blfs-svn;/xsoft/firefox.html">Firefox</ulink>; make sure to
      reinstall <xref linkend="python3"/>)
    </para>

  </sect2>

  <sect2 role="installation">
    <title>Installation of NSS</title>

<!--
    <note>
      <para>
        Some old generations processors lack an assembler instruction that
        is generated unconditionally by NSS-3.90. It leads to an
        "illegal instruction" fault when running firefox. The availability
        of this instruction is asserted by the <quote>adx</quote> flag
        in <filename>/proc/cpuinfo</filename>. If this flag is not set,
        apply the following patch:
      </para>
    </note>

<screen><userinput>grep -q adx /proc/cpuinfo || \
patch -Np1 -i ../nss-&nss-version;-illegal_instruction-1.patch</userinput></screen>

-->

    <important>
      <para>
        If you're rebuilding NSS and you have not installed <xref
        linkend="sqlite"/>, run the following command to remove a problematic
        library as the &root; user:
      </para>

<screen role="root"><userinput remap="pre">sqlite3 --version > /dev/null 2>&amp;1 || 
if [ -f /usr/lib/libsqlite3.so ]; then
  rm -vf /usr/lib/libsqlite3.so
fi</userinput></screen>

    </important>

    <para>
      Install <application>NSS</application> by running the following commands:
    </para>

<screen><userinput>patch -Np1 -i ../nss-standalone-1.patch &amp;&amp;

cd nss &amp;&amp;

make BUILD_OPT=1                     \
  NSPR_INCLUDE_DIR=/usr/include/nspr \
  USE_SYSTEM_ZLIB=1                  \
  ZLIB_LIBS=-lz                      \
  NSS_ENABLE_WERROR=0                \
  USE_64=1                           \
  $([ -f /usr/lib/libsqlite3.so ] &amp;&amp; echo NSS_USE_SYSTEM_SQLITE=1)</userinput></screen>

    <para>
      Now, as the &root; user:
    </para>

<screen role="root"><userinput>cd ../dist                                                          &amp;&amp;

install -v -m755 Linux*/lib/*.so              /usr/lib              &amp;&amp;
install -v -m644 Linux*/lib/{*.chk,libcrmf.a} /usr/lib              &amp;&amp;

install -v -m755 -d                           /usr/include/nss      &amp;&amp;
cp -v -RL {public,private}/nss/*              /usr/include/nss      &amp;&amp;

install -v -m755 Linux*/bin/{certutil,nss-config,pk12util} /usr/bin &amp;&amp;

install -v -m644 Linux*/lib/pkgconfig/nss.pc  /usr/lib/pkgconfig</userinput></screen>

    <important>
      <para>
        If you install <xref linkend="sqlite"/> after building this package and
        wish to build <ulink
        url="&blfs-svn;/xsoft/firefox.html">Firefox</ulink>, then recompile
        this package or else an error during compilation will appear.
      </para>
    </important>

  </sect2>

  <sect2 role="installation">
    <title>lib32 Installation of NSS</title>

    <important>
      <para>
        If you're rebuilding NSS, run the following command to remove a
        problematic library as the &root; user:
      </para>

<screen role="root"><userinput remap="pre">sqlite3 --version > /dev/null 2>&amp;1 || 
if [ -f /usr/lib32/libsqlite3.so ]; then
  rm -vf /usr/lib32/libsqlite3.so
fi</userinput></screen>

    </important>

    <para>
      Install <application>lib32-NSS</application> by running the following commands:
    </para>

<screen><userinput>cd ../nss                                         &amp;&amp;
find -name "Linux*.OBJ" -type d -exec rm -rf {} + &amp;&amp;
rm -rf ../dist                                    &amp;&amp;

CC="gcc -m32" CXX="g++ -m32"   \
make BUILD_OPT=1                      \
NSPR_INCLUDE_DIR=/usr/include/nspr  \
  USE_SYSTEM_ZLIB=1                   \
  ZLIB_LIBS=-lz                       \
  NSS_ENABLE_WERROR=0                 \
$([ -f /usr/lib32/libsqlite3.so ] &amp;&amp; echo NSS_USE_SYSTEM_SQLITE=1)</userinput></screen>

    <para>
      Now, as the <systemitem class="username">root</systemitem> user:
    </para>

<screen role="root"><userinput>cd ../dist &amp;&amp;

install -v -m755 Linux*/lib/*.so              /usr/lib32           &amp;&amp;
install -v -m644 Linux*/lib/{*.chk,libcrmf.a} /usr/lib32           &amp;&amp;
sed -i 's/lib/lib32/g' Linux*/lib/pkgconfig/nss.pc                 &amp;&amp;
install -v -m644 Linux*/lib/pkgconfig/nss.pc  /usr/lib32/pkgconfig &amp;&amp;
ldconfig</userinput></screen>

  </sect2>

  <sect2 role="commands">
    <title>Command Explanations</title>

    <note><para>
      For a full list of options, inspect the <filename>Makefile</filename> and
      the various files in
      <filename>nss-&nss-version;/nss/coreconf/</filename>.
    </para></note>

    <para>
      <parameter>BUILD_OPT=1</parameter>: This option is passed to
      <command>make</command> so that the build is performed with no debugging
      symbols built into the binaries and the default compiler optimizations are
      used.
    </para>

    <para>
      <parameter>NSPR_INCLUDE_DIR=/usr/include/nspr</parameter>: This option
      sets the location of the nspr headers.
    </para>

    <para>
      <parameter>USE_SYSTEM_ZLIB=1</parameter>: This option is passed to
      <command>make</command> to ensure that the
      <filename class="libraryfile">libssl3.so</filename> library is linked to
      the system installed <application>zlib</application> instead of the
      in-tree version.
    </para>

    <para>
      <parameter>ZLIB_LIBS=-lz</parameter>: This option provides the
      linker flags needed to link to the system <application>zlib</application>.
    </para>

    <para>
      <command>USE_64=1</command>: This is <emphasis>required on
      x86_64</emphasis>, otherwise <command>make</command> will try (and fail)
      to create 32-bit objects for the normal installation.
    </para>

    <para>
      <parameter>NSS_ENABLE_WERROR=0</parameter>: This option disables
      -Werror (warnings being counted as errors).
    </para>

    <para>
      <command>$([ -f /usr/lib{,32}/libsqlite3.so ] &amp;&amp; echo
      NSS_USE_SYSTEM_SQLITE=1)</command>: This tests if
      <application>sqlite</application> is installed and if so it
      <command>echo</command>s the option NSS_USE_SYSTEM_SQLITE=1 to
      <command>make</command> so that
      <filename class="libraryfile">libsoftokn3.so</filename> will link against
      the system version of sqlite.
    </para>

  </sect2>

  <sect2 role="content">
    <title>Contents</title>

    <segmentedlist>
      <segtitle>Installed Programs</segtitle>
      <segtitle>Installed Libraries</segtitle>
      <segtitle>Installed Directories</segtitle>

      <seglistitem>
        <seg>
          certutil, nss-config, and pk12util
        </seg>
        <seg>
          libcrmf (static), libfreebl3, libfreeblpriv3,
          libnss3, libnssckbi, libnssckbi-testlib,
          libnssdbm3, libnsssysinit, libnssutil3,
          libpkcs11testmodule, libsmime3, libsoftokn3,
          and libssl3
        </seg>
        <seg>
          /usr/include/nss
        </seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">Short Descriptions</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="certutil">
        <term><command>certutil</command></term>
        <listitem>
          <para>
            is the Mozilla Certificate Database Tool. It is a command-line
            utility that can create and modify the Netscape Communicator
            cert8.db and key3.db database files. It can also list, generate,
            modify, or delete certificates within the cert8.db file and create
            or change the password, generate new public and private key pairs,
            display the contents of the key database, or delete key pairs within
            the key3.db file
          </para>
          <indexterm zone="nss certutil">
            <primary sortas="b-certutil">certutil</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="nss-config">
        <term><command>nss-config</command></term>
        <listitem>
          <para>
            is used to determine the NSS library settings of the installed NSS
            libraries
          </para>
          <indexterm zone="nss nss-config">
            <primary sortas="b-nss-config">nss-config</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="pk12util">
        <term><command>pk12util</command></term>
        <listitem>
          <para>
            is a tool for importing certificates and keys from pkcs #12 files
            into NSS or exporting them. It can also list certificates and keys
            in such files
          </para>
          <indexterm zone="nss pk12util">
            <primary sortas="b-pk12util">pk12util</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
