<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../../general.ent">
  %general-entities;
]>

<sect1 id="whatis-mingw-w64" xreflabel="What is the MinGW-w64 Toolchain?">
  <?dbhtml filename="whatis-mingw-w64.html"?>

  <title>What is the MinGW-w64 Toolchain?</title>

  <para>
    <application>MinGW-w64</application> itself is a package providing headers,
    C runtime libraries, and much more. When support for it is built into
    compilers such as <application>GCC</application>, it enables the building
    of software targetting Windows, such as programs and libraries. This
    software is aimed to be used on Windows, but can also be used on Linux.
  </para>

  <note><para>
    <application>LLVM</application> can also be used for the toolchain. This
    book will use <application>GCC</application> instead as it has easier
    instructions, quicker build times, and saves disk space.
  </para></note>

  <para>
    <xref linkend="wine"/> depends on this functionality to build DLLs (Dynamic
    Link Libraries), or the equivalent of Linux dynamic libraries, appended
    with the suffix <filename class="extension">.so</filename>, or Shared
    Objects.
  </para>

  <para>
    Most Windows software is dynamically linked. While most of them when
    shipped include DLLs packaged in the installed directory, or extracted from
    a ZIP file, not all DLLs will be packaged. A number of the dependencies
    will be installed on a given Windows machine already, such as libraries for
    DirectX/Direct3D or OpenGL support. Since we are on a Unix-like operating
    system, we do not have such DLLs installed on the system, and they were
    never compiled in LFS or earlier in this book. <xref linkend="nvidia"/>
    does install DLL files but are strictly meant for
    <application>Wine</application> and Proton as a way of exposing DLSS.
    <application>MinGW-w64</application> only installs static libraries, which
    are helpful when compiling Windows software, but are useless at runtime.
    <application>Wine</application> needs to compile the dynamic libraries for
    most Windows software to function.
  </para>

  <para>
    If you are a developer and wish to target Windows, this toolchain should be
    pretty useful. You won't need to follow any of the chapters after this one
    if you just want the MinGW-w64 toolchain. It is recommended to still
    install <application>Wine</application> for sanity checks revolving around
    your built software you are developing, although it isn't a perfect
    replacement for an accurate Windows environment. While the built software
    may work fine with <application>Wine</application>, it could be totally
    broken on Windows.
  </para>

  <para>
    The following process works up to building the pieces (Windows headers and
    binutils for linking and assembling Windows software) for a static
    compilation of GCC, which means it cannot do much of anything with dynamic
    libraries besides build them. This is especially a problem with C++
    software as you need <filename class="libraryfile">libstdc++</filename>,
    which should be dynamic, for linking and execution. This is also a problem
    for software that uses atomic. Most of all, Windows software built with the
    toolchain needs <filename class="libraryfile">libgcc_s_seh</filename> which
    is not provided in the static build.
  </para>

  <para>
    However, this barebones basic toolchain is enough to build up the remaining
    pieces of the toolchain. After doing so, you can rebuild GCC and have a
    complete toolchain ready for targetting Windows. Realistically, you could
    grab a binary distribution of the toolchain and compile everything with
    less steps. In the past, that is exactly what this book has done. GLFS
    editors/contributors since then have decided to scrap that idea
    <footnote><para>
      See this
      <ulink url="https://github.com/Zeckmathederg/glfs/issues/9">issue</ulink>
      for rationale behind bootstrapping the MinGW-w64 toolchain. The issue
      originates from the old Github repository the GLFS project was once
      hosted.
    </para></footnote> and have chosen to bootstrap the toolchain instead.
  </para>

</sect1>
