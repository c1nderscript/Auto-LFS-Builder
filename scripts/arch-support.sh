#!/bin/bash

# Enhanced Arch Linux Support Script for Auto-LFS-Builder
# This script provides comprehensive Arch Linux compatibility and optimization

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() { echo -e "${BLUE}[ARCH-SUPPORT]${NC} $*"; }
log_success() { echo -e "${GREEN}[SUCCESS]${NC} $*"; }
log_warning() { echo -e "${YELLOW}[WARNING]${NC} $*"; }
log_error() { echo -e "${RED}[ERROR]${NC} $*"; }

# Check if running on Arch Linux
check_arch_linux() {
    if [[ ! -f /etc/arch-release ]]; then
        log_error "This script is designed for Arch Linux systems only"
        log_info "Detected system: $(uname -a)"
        exit 1
    fi
    
    log_success "Arch Linux detected"
    log_info "System info: $(cat /etc/arch-release)"
}

# Enhanced package management
check_aur_helper() {
    local aur_helpers=("yay" "paru" "trizen" "yaourt")
    
    for helper in "${aur_helpers[@]}"; do
        if command -v "$helper" &> /dev/null; then
            echo "$helper"
            return 0
        fi
    done
    
    return 1
}

install_aur_helper() {
    log_info "Installing AUR helper (yay) for enhanced package management..."
    
    if ! command -v git &> /dev/null; then
        sudo pacman -S --needed --noconfirm git
    fi
    
    if ! command -v base-devel &> /dev/null; then
        sudo pacman -S --needed --noconfirm base-devel
    fi
    
    # Install yay
    local temp_dir=$(mktemp -d)
    cd "$temp_dir"
    git clone https://aur.archlinux.org/yay.git
    cd yay
    makepkg -si --noconfirm
    
    # Cleanup
    cd /
    rm -rf "$temp_dir"
    
    log_success "AUR helper (yay) installed successfully"
}

# Enhanced dependency installation
install_arch_dependencies() {
    log_info "Installing Arch Linux dependencies for LFS building..."
    
    # Core build dependencies
    local core_deps=(
        "base-devel"
        "git"
        "wget"
        "curl"
        "gawk"
        "m4"
        "texinfo"
        "bison"
        "flex"
        "bc"
        "cpio"
        "dosfstools"
        "parted"
        "rsync"
        "unzip"
        "which"
        "pkg-config"
        "autoconf"
        "automake"
        "libtool"
        "patch"
        "python"
        "python-pip"
    )
    
    # Optional performance dependencies
    local optional_deps=(
        "ccache"
        "distcc"
        "ninja"
        "cmake"
        "meson"
        "llvm"
        "clang"
        "lld"
    )
    
    # LFS-specific dependencies
    local lfs_deps=(
        "qemu-system-x86_64"
        "arch-install-scripts"
        "xorriso"
        "libisoburn"
        "squashfs-tools"
        "mtools"
        "syslinux"
    )
    
    # Install core dependencies
    log_info "Installing core dependencies..."
    sudo pacman -S --needed --noconfirm "${core_deps[@]}"
    
    # Install LFS-specific dependencies
    log_info "Installing LFS-specific dependencies..."
    sudo pacman -S --needed --noconfirm "${lfs_deps[@]}"
    
    # Install optional dependencies with user confirmation
    log_info "Optional performance dependencies available:"
    for dep in "${optional_deps[@]}"; do
        if ! pacman -Qi "$dep" &>/dev/null; then
            echo "  - $dep"
        fi
    done
    
    echo
    read -p "Install optional performance dependencies? (y/N): " -r
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        sudo pacman -S --needed --noconfirm "${optional_deps[@]}"
        log_success "Optional dependencies installed"
    fi
}

# Configure Arch-specific build environment
configure_arch_build_env() {
    log_info "Configuring Arch Linux build environment..."
    
    # Read makepkg.conf for optimization flags
    local makepkg_conf="/etc/makepkg.conf"
    if [[ -f "$makepkg_conf" ]]; then
        log_info "Reading Arch build configuration from $makepkg_conf"
        
        # Extract compiler flags
        local cflags=$(grep '^CFLAGS=' "$makepkg_conf" | cut -d'=' -f2 | tr -d '"')
        local cxxflags=$(grep '^CXXFLAGS=' "$makepkg_conf" | cut -d'=' -f2 | tr -d '"')
        local ldflags=$(grep '^LDFLAGS=' "$makepkg_conf" | cut -d'=' -f2 | tr -d '"')
        
        # Create optimized configuration
        cat > "arch-build-config.conf" << EOF
# Arch Linux Optimized Build Configuration
# Generated by Auto-LFS-Builder Arch Support

# Compiler flags from makepkg.conf
CFLAGS="${cflags:-\"-march=x86-64 -mtune=generic -O2 -pipe -fno-plt -fexceptions"}"
CXXFLAGS="${cxxflags:-\"$CFLAGS -Wp,-D_FORTIFY_SOURCE=2 -Wformat -Werror=format-security"}"
LDFLAGS="${ldflags:-\"-Wl,-O1,--sort-common,--as-needed,-z,relro,-z,now"}"

# Build optimization
MAKEFLAGS="-j$(nproc)"

# Arch-specific optimizations
BUILD_ARCH="$(uname -m)"
BUILD_VENDOR="arch"
BUILD_OS="linux-gnu"

# Enable ccache if available
if command -v ccache &> /dev/null; then
    export PATH="/usr/lib/ccache/bin:$PATH"
    export CCACHE_DIR="$HOME/.ccache"
    export CCACHE_COMPRESS=1
    export CCACHE_COMPRESSLEVEL=6
    export CCACHE_MAXSIZE=5G
fi

# Export variables
export CFLAGS CXXFLAGS LDFLAGS MAKEFLAGS
EOF
        
        log_success "Arch build configuration created: arch-build-config.conf"
    else
        log_warning "makepkg.conf not found, using default configuration"
    fi
}

# System validation for Arch Linux
validate_arch_system() {
    log_info "Validating Arch Linux system for LFS building..."
    
    local validation_passed=true
    
    # Check kernel version
    local kernel_version=$(uname -r)
    log_info "Kernel version: $kernel_version"
    
    # Check glibc version
    local glibc_version=$(ldd --version | head -n1 | grep -oE '[0-9]+\.[0-9]+' | head -n1)
    if [[ $(echo "$glibc_version >= 2.31" | bc -l) -eq 1 ]]; then
        log_success "Glibc version $glibc_version is compatible"
    else
        log_error "Glibc version $glibc_version may be too old (need >= 2.31)"
        validation_passed=false
    fi
    
    # Check GCC version
    local gcc_version=$(gcc --version | head -n1 | grep -oE '[0-9]+\.[0-9]+' | head -n1)
    if [[ $(echo "$gcc_version >= 9.0" | bc -l) -eq 1 ]]; then
        log_success "GCC version $gcc_version is compatible"
    else
        log_error "GCC version $gcc_version may be too old (need >= 9.0)"
        validation_passed=false
    fi
    
    # Check available disk space
    local available_space=$(df / | awk 'NR==2 {print $4}')
    local required_space=52428800  # 50GB in KB
    
    if [[ "$available_space" -gt "$required_space" ]]; then
        log_success "Sufficient disk space available ($(( available_space / 1024 / 1024 ))GB)"
    else
        log_error "Insufficient disk space (need at least 50GB)"
        validation_passed=false
    fi
    
    # Check available memory
    local available_memory=$(free -m | awk 'NR==2{print $7}')
    if [[ "$available_memory" -gt 2048 ]]; then
        log_success "Sufficient memory available (${available_memory}MB)"
    else
        log_warning "Low memory available (${available_memory}MB), consider adding swap"
    fi
    
    # Check for multilib support
    if grep -q "^\[multilib\]" /etc/pacman.conf; then
        log_success "Multilib repository enabled"
    else
        log_info "Multilib repository not enabled (may be needed for some packages)"
    fi
    
    # Check for AUR helper
    if check_aur_helper &> /dev/null; then
        log_success "AUR helper available: $(check_aur_helper)"
    else
        log_info "No AUR helper detected (will install yay if needed)"
    fi
    
    if [[ "$validation_passed" == "true" ]]; then
        log_success "System validation passed"
        return 0
    else
        log_error "System validation failed"
        return 1
    fi
}

# Performance optimization for Arch
optimize_arch_performance() {
    log_info "Applying Arch Linux performance optimizations..."
    
    # Configure ccache
    if command -v ccache &> /dev/null; then
        log_info "Configuring ccache for build acceleration..."
        ccache --set-config=max_size=5G
        ccache --set-config=compression=true
        ccache --set-config=compression_level=6
        ccache --set-config=cache_dir="$HOME/.ccache"
        
        log_success "ccache configured with 5GB cache size"
    fi
    
    # Configure tmpfs for build directory if enough RAM
    local available_memory=$(free -m | awk 'NR==2{print $2}')
    if [[ "$available_memory" -gt 8192 ]]; then
        log_info "Configuring tmpfs for build acceleration..."
        
        # Create tmpfs mount point
        local tmpfs_size="4G"
        local tmpfs_mount="/tmp/lfs-build"
        
        if ! mountpoint -q "$tmpfs_mount"; then
            sudo mkdir -p "$tmpfs_mount"
            sudo mount -t tmpfs -o size="$tmpfs_size",nodev,nosuid,noexec tmpfs "$tmpfs_mount"
            sudo chown "$USER:$USER" "$tmpfs_mount"
            
            log_success "tmpfs build directory created at $tmpfs_mount"
            log_info "Export LFS_BUILD_DIR=$tmpfs_mount to use tmpfs for building"
        fi
    fi
    
    # Optimize I/O scheduler for SSDs
    if [[ -b /dev/nvme0n1 ]] || [[ -b /dev/sda ]]; then
        log_info "Applying I/O scheduler optimizations..."
        
        # This would typically be done via udev rules or systemd
        log_info "Consider setting I/O scheduler to 'mq-deadline' for better build performance"
        log_info "Add 'elevator=mq-deadline' to kernel parameters or use udev rules"
    fi
}

# Create Arch-specific LFS configuration
create_arch_lfs_config() {
    log_info "Creating Arch Linux specific LFS configuration..."
    
    cat > "lfs-builder-arch.env" << 'EOF'
# Arch Linux Specific LFS Configuration
# Source this file after the main lfs-builder.env

# Arch Linux optimizations
export ARCH_LINUX=true
export BUILD_SYSTEM="arch"

# Use Arch compiler flags
if [[ -f "arch-build-config.conf" ]]; then
    source "arch-build-config.conf"
fi

# Arch-specific build options
export USE_CCACHE=true
export CCACHE_SIZE="5G"
export PARALLEL_JOBS="$(nproc)"

# Arch package manager integration
export ARCH_PACKAGE_MANAGER="pacman"

# AUR helper if available
if command -v yay &> /dev/null; then
    export AUR_HELPER="yay"
elif command -v paru &> /dev/null; then
    export AUR_HELPER="paru"
fi

# Arch-specific paths
export ARCH_BUILD_DIR="${ARCH_BUILD_DIR:-/tmp/lfs-build}"
export ARCH_CCACHE_DIR="${HOME}/.ccache"

# Build environment
export MAKEFLAGS="-j$(nproc)"
export NINJA_STATUS="[%f/%t] "

# Enable link-time optimization if supported
if gcc -v 2>&1 | grep -q "enable-lto"; then
    export ENABLE_LTO=true
fi

# Arch Linux specific functions
arch_install_package() {
    local package="$1"
    if pacman -Qi "$package" &>/dev/null; then
        echo "Package $package already installed"
        return 0
    fi
    
    # Try official repos first
    if pacman -Si "$package" &>/dev/null; then
        sudo pacman -S --needed --noconfirm "$package"
    elif [[ -n "${AUR_HELPER:-}" ]]; then
        # Try AUR
        "$AUR_HELPER" -S --needed --noconfirm "$package"
    else
        echo "Package $package not found in official repos and no AUR helper available"
        return 1
    fi
}

# Arch Linux package alternatives
arch_find_package_alternative() {
    local package="$1"
    
    case "$package" in
        "python3")
            echo "python"
            ;;
        "python3-dev")
            echo "python"
            ;;
        "libc6-dev")
            echo "glibc"
            ;;
        "build-essential")
            echo "base-devel"
            ;;
        *)
            echo "$package"
            ;;
    esac
}

# Export functions
export -f arch_install_package
export -f arch_find_package_alternative

echo "Arch Linux specific LFS configuration loaded"
EOF

    log_success "Arch Linux LFS configuration created: lfs-builder-arch.env"
}

# Troubleshooting function
run_arch_troubleshooting() {
    log_info "Running Arch Linux troubleshooting diagnostics..."
    
    echo "=== System Information ==="
    uname -a
    cat /etc/arch-release
    
    echo "\n=== Package Manager Status ==="
    pacman --version
    
    echo "\n=== Available Disk Space ==="
    df -h /
    
    echo "\n=== Memory Information ==="
    free -h
    
    echo "\n=== Compiler Information ==="
    gcc --version
    
    echo "\n=== Build Tools ==="
    which make
    make --version | head -n1
    
    echo "\n=== Missing Dependencies ==="
    local missing_deps=()
    local required_tools=("git" "wget" "curl" "bison" "flex" "gawk" "m4" "texinfo")
    
    for tool in "${required_tools[@]}"; do
        if ! command -v "$tool" &> /dev/null; then
            missing_deps+=("$tool")
        fi
    done
    
    if [[ ${#missing_deps[@]} -gt 0 ]]; then
        echo "Missing tools: ${missing_deps[*]}"
        echo "Install with: sudo pacman -S ${missing_deps[*]}"
    else
        echo "All required tools are available"
    fi
    
    echo "\n=== Potential Issues ==="
    
    # Check for common issues
    if ! grep -q "^\[multilib\]" /etc/pacman.conf; then
        echo "• Multilib repository not enabled (may cause issues with some packages)"
    fi
    
    if [[ ! -f /usr/bin/python3 ]] && [[ ! -L /usr/bin/python3 ]]; then
        echo "• python3 symlink missing (some scripts may fail)"
    fi
    
    local available_space=$(df / | awk 'NR==2 {print $4}')
    if [[ "$available_space" -lt 52428800 ]]; then
        echo "• Insufficient disk space for LFS build (need at least 50GB)"
    fi
    
    echo "\n=== Recommendations ==="
    echo "• Enable multilib repository if building 32-bit compatibility"
    echo "• Install ccache for faster rebuilds: sudo pacman -S ccache"
    echo "• Consider using tmpfs for build directory if you have >8GB RAM"
    echo "• Install yay or paru for AUR package management"
}

# Main execution function
main() {
    log_info "Starting Arch Linux support configuration for Auto-LFS-Builder"
    
    # Parse command line arguments
    local action="setup"
    while [[ $# -gt 0 ]]; do
        case $1 in
            --validate)
                action="validate"
                shift
                ;;
            --optimize)
                action="optimize"
                shift
                ;;
            --troubleshoot)
                action="troubleshoot"
                shift
                ;;
            --help)
                echo "Usage: $0 [OPTIONS]"
                echo "Options:"
                echo "  --validate      Validate system for LFS building"
                echo "  --optimize      Apply performance optimizations"
                echo "  --troubleshoot  Run troubleshooting diagnostics"
                echo "  --help          Show this help message"
                exit 0
                ;;
            *)
                log_error "Unknown option: $1"
                exit 1
                ;;
        esac
    done
    
    # Always check if we're on Arch Linux
    check_arch_linux
    
    case "$action" in
        "setup")
            install_arch_dependencies
            configure_arch_build_env
            create_arch_lfs_config
            
            # Install AUR helper if not present
            if ! check_aur_helper &> /dev/null; then
                read -p "Install AUR helper (yay) for enhanced package management? (y/N): " -r
                if [[ $REPLY =~ ^[Yy]$ ]]; then
                    install_aur_helper
                fi
            fi
            
            optimize_arch_performance
            log_success "Arch Linux setup completed successfully!"
            log_info "Source lfs-builder-arch.env in your build environment"
            ;;
        "validate")
            validate_arch_system
            ;;
        "optimize")
            optimize_arch_performance
            ;;
        "troubleshoot")
            run_arch_troubleshooting
            ;;
    esac
}

# Run main function if script is executed directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
